[moons_voter]

seed = [i for i in range(10)]
noise = 0.02
size_train = 5000
data = "moons-"+str(noise).replace(".", "_")+"-"+str(seed)+"-"+str(size_train)
learner = ["bound-sto"]

nb_per_attribute = [32, 64, 128]
voter = "stump"

prior = 0.5
multi = 0

risk = ["exact", "MC"] if learner == "bound-sto" else "exact"
delta = 0.05

sto_prior = 1.0
sigmoid_c = 100 
rand_n = 100 
mc_draws = [1, 10, 100] if risk == "MC" else 10

epoch = 2000

command = python optimize.py chap_5_moons.csv ${params}

[moons_voter -- moons_size]

seed = [i for i in range(10)]
noise = 0.02
size_train = [100, 500, 1000, 5000]
data = "moons-"+str(noise).replace(".", "_")+"-"+str(seed)+"-"+str(size_train)
learner = ["bound-sto"]

nb_per_attribute = 32
voter = "stump"

prior = 0.5
multi = 0

risk = ["exact", "MC"] if learner == "bound-sto" else "exact"
delta = 0.05

sto_prior = 1.0
sigmoid_c = 100 
rand_n = 100 
mc_draws = [1, 10, 100] if risk == "MC" else 10

epoch = 2000

command = python optimize.py chap_5_moons.csv ${params}

[moons_voter -- binary]

seed = [i for i in range(10)]
data = ["credit", "heart", "usvotes", "wdbc", "tictactoe", "svmguide", "haberman", "phishing"]
learner = ["bound-sto", "bound-rand"]
 
nb_per_attribute = 10
nb_tree = 100
voter = ["stump", "tree"]

prior = 0.5
multi = 0

risk = ["exact", "MC"]
delta = 0.05

sto_prior = 1.0
sigmoid_c = 100 
rand_n = 100 
mc_draws = 10

epoch = 2000

command = python optimize.py chap_5.csv ${params}


[moons_voter -- multiclass]

seed = [i for i in range(10)]
data = ["mnist", "fashion", "pendigits", "protein", "shuttle", "sensorless", "glass"]
learner = ["bound-sto", "bound-rand"]

nb_per_attribute = 10
nb_tree = 50 if learner == "bound-sto" else 100
voter = "tree"

prior = 0.5
multi = 1 if learner == "bound-sto" else 0

risk = ["exact", "MC"] if learner == "bound-sto" else "exact"
delta = 0.05

sto_prior = 1.0
sigmoid_c = 100 
rand_n = 100 
mc_draws = 10

epoch = 20
batch_size = 64

command = python optimize.py chap_5.csv ${params}

[moons_voter -- binary_depth]

seed = [i for i in range(10)]
data = ["credit", "heart", "usvotes", "wdbc", "tictactoe", "svmguide", "haberman", "phishing"]
learner = ["bound-risk", "bound-joint", "c-bound-seeger", "bound-rand", "bound-sto", "nothing"]

nb_per_attribute = 10
nb_tree = 100
voter = "tree"
max_depth = [1, 2, 4, 8, 16]

prior = 0.5
multi = 0

risk = "exact"
delta = 0.05

sto_prior = 1.0
sigmoid_c = 100 
rand_n = 100 
mc_draws = 10

epoch = 2000

command = python optimize.py chap_5_depth.csv ${params}

[moons_voter -- multiclass_depth]

seed = [i for i in range(10)]
data = ["mnist", "fashion", "pendigits", "protein", "shuttle", "sensorless", "glass"]
learner = ["bound-risk", "bound-joint", "c-bound-seeger", "bound-rand", "bound-sto", "nothing"]

nb_per_attribute = 10
nb_tree = 100
voter = "tree"
max_depth = [1, 2, 4, 8, 16]

prior = 0.5
multi = 1 if learner == "bound-sto" else 0

risk = "exact"
delta = 0.05

sto_prior = 1.0
sigmoid_c = 100 
rand_n = 100
mc_draws = 10

epoch = 20
batch_size = 64

command = python optimize.py chap_5_depth.csv ${params}

[moons_voter -- binary_prior]

seed = [i for i in range(10)]
data = ["credit", "heart", "usvotes", "wdbc", "tictactoe", "svmguide", "haberman", "phishing"]
learner = ["bound-risk", "bound-joint", "c-bound-seeger", "bound-rand", "bound-sto", "nothing"]
 
nb_per_attribute = 10
nb_tree = 100
voter = ["stump", "tree"]

prior = 0.5
multi = 0

risk = "exact"
delta = 0.05

sto_prior = [0.01, 1.0, 10, 100]
sigmoid_c = 100 
rand_n = 100 
mc_draws = 10

epoch = 2000

command = python optimize.py chap_5_prior.csv ${params}

[moons_voter -- multiclass_prior]

seed = [i for i in range(10)]
data = ["mnist", "fashion", "pendigits", "protein", "shuttle", "sensorless", "glass"]
learner = ["bound-risk", "bound-joint", "c-bound-seeger", "bound-rand", "bound-sto", "nothing"]

nb_per_attribute = 10
nb_tree = 100
voter = "tree"

prior = 0.5
multi = 1 if learner == "bound-sto" else 0

risk = "exact"
delta = 0.05

sto_prior = [0.01, 1.0, 10, 100]
sigmoid_c = 100 
rand_n = 100
mc_draws = 10

epoch = 20
batch_size = 64

command = python optimize.py chap_5_prior.csv ${params}
